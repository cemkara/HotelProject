// <auto-generated />
using System;
using HotelProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelProject.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230826080014_Mig_CreateNotWarningMigration")]
    partial class Mig_CreateNotWarningMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("AdminCommissionEarning", b =>
                {
                    b.Property<int>("AdminCommissionEarningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminCommissionEarningId"));

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EarnedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AdminCommissionEarningId");

                    b.HasIndex("OrderId");

                    b.ToTable("AdminCommissionEarnings");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DiscountCoupon", b =>
                {
                    b.Property<int>("DiscountCouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountCouponId"));

                    b.Property<string>("CouponCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("DiscountCouponId");

                    b.HasIndex("StatusId");

                    b.ToTable("DiscountCoupons");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DistrictName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictId");

                    b.HasIndex("CityId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DriverAssignment", b =>
                {
                    b.Property<int>("DriverAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverAssignmentId"));

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveryUserUserId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("DriverAssignmentId");

                    b.HasIndex("DeliveryUserUserId");

                    b.HasIndex("OrderId");

                    b.ToTable("DriverAssignments");
                });

            modelBuilder.Entity("Email", b =>
                {
                    b.Property<int>("EmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailId"));

                    b.Property<string>("Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("EmailId");

                    b.HasIndex("StatusId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("EventLog", b =>
                {
                    b.Property<int>("EventLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventLogID"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("EventLogID");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("EventType", b =>
                {
                    b.Property<int>("EventTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventTypeId");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("Hotel", b =>
                {
                    b.Property<int>("HotelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("HotelId");

                    b.HasIndex("AddressId");

                    b.HasIndex("StatusId");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("HotelCommission", b =>
                {
                    b.Property<int>("HotelCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelCommissionId"));

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("HotelCommissionId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelCommissions");
                });

            modelBuilder.Entity("HotelCommissionEarning", b =>
                {
                    b.Property<int>("HotelCommissionEarningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelCommissionEarningId"));

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("EarnedAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.HasKey("HotelCommissionEarningId");

                    b.HasIndex("HotelId");

                    b.HasIndex("OrderId");

                    b.ToTable("HotelCommissionEarnings");
                });

            modelBuilder.Entity("HotelEmail", b =>
                {
                    b.Property<int>("HotelEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelEmailId"));

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.HasKey("HotelEmailId");

                    b.HasIndex("EmailId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelEmails");
                });

            modelBuilder.Entity("HotelMenu", b =>
                {
                    b.Property<int>("HotelMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelMenuId"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelMenuId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelMenus");
                });

            modelBuilder.Entity("HotelMenuProduct", b =>
                {
                    b.Property<int>("HotelMenuProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelMenuProductId"));

                    b.Property<decimal?>("DiscountRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("HotelMenuId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("HotelMenuProductId");

                    b.HasIndex("HotelMenuId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StatusId");

                    b.ToTable("HotelMenuProducts");
                });

            modelBuilder.Entity("HotelPhoneNumber", b =>
                {
                    b.Property<int>("HotelPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelPhoneNumberId"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneNumberId")
                        .HasColumnType("int");

                    b.HasKey("HotelPhoneNumberId");

                    b.HasIndex("HotelId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("HotelPhoneNumbers");
                });

            modelBuilder.Entity("HotelRestaurant", b =>
                {
                    b.Property<int>("HotelRestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelRestaurantId"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("HotelRestaurantId");

                    b.HasIndex("HotelId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("HotelRestaurants");
                });

            modelBuilder.Entity("HotelRoom", b =>
                {
                    b.Property<int>("HotelRoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HotelRoomId"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HotelRoomId");

                    b.HasIndex("HotelId");

                    b.ToTable("HotelRooms");
                });

            modelBuilder.Entity("HotelUser", b =>
                {
                    b.Property<int>("HotelsHotelId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("HotelsHotelId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("HotelUser");
                });

            modelBuilder.Entity("NotificationLog", b =>
                {
                    b.Property<int>("NotificationLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationLogID"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NotificationLogTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationLogID");

                    b.HasIndex("HotelId");

                    b.HasIndex("NotificationLogTypeId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationLogs");
                });

            modelBuilder.Entity("NotificationLogType", b =>
                {
                    b.Property<int>("NotificationLogTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationLogTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationLogTypeId");

                    b.ToTable("NotificationLogType");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("CouponDiscountCouponId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelRoomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("OrderTotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CouponDiscountCouponId");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelRoomId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus");
                });

            modelBuilder.Entity("OrderStatusHistory", b =>
                {
                    b.Property<int>("OrderStatusHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderStatusHistoryId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderStatusHistoryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("OrderStatusHistories");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPayment")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("PaymentId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentMethodId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("PhoneNumber", b =>
                {
                    b.Property<int>("PhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhoneNumberId"));

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("PhoneNumberId");

                    b.HasIndex("StatusId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("AllergenWarning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StatusId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCategoryId"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("RatingId");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportId"));

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelMenuId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReportDurationId")
                        .HasColumnType("int");

                    b.Property<int?>("ReportTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelMenuId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ReportDurationId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("TransferId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("ReportDuration", b =>
                {
                    b.Property<int>("ReportDurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportDurationId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportDurationId");

                    b.ToTable("ReportDuration");
                });

            modelBuilder.Entity("ReportType", b =>
                {
                    b.Property<int>("ReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReportTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportType");
                });

            modelBuilder.Entity("Restaurant", b =>
                {
                    b.Property<int>("RestaurantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("MaxDeliveryTime")
                        .HasColumnType("int");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RestaurantTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantId");

                    b.HasIndex("AddressId");

                    b.HasIndex("RestaurantTypeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("RestaurantCommission", b =>
                {
                    b.Property<int>("RestaurantCommissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantCommissionId"));

                    b.Property<decimal>("CommissionRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantCommissionId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantCommissions");
                });

            modelBuilder.Entity("RestaurantEmail", b =>
                {
                    b.Property<int>("RestaurantEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantEmailId"));

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelRestaurantId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantEmailId");

                    b.HasIndex("EmailId");

                    b.HasIndex("HotelRestaurantId");

                    b.ToTable("RestaurantEmails");
                });

            modelBuilder.Entity("RestaurantPhoneNumber", b =>
                {
                    b.Property<int>("RestaurantPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantPhoneNumberId"));

                    b.Property<int?>("HotelRestaurantId")
                        .HasColumnType("int");

                    b.Property<int?>("PhoneNumberId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantPhoneNumberId");

                    b.HasIndex("HotelRestaurantId");

                    b.HasIndex("PhoneNumberId");

                    b.ToTable("RestaurantPhoneNumbers");
                });

            modelBuilder.Entity("RestaurantProduct", b =>
                {
                    b.Property<int>("RestaurantProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantProductId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("RestaurantId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RestaurantId");

                    b.ToTable("RestaurantProducts");
                });

            modelBuilder.Entity("RestaurantType", b =>
                {
                    b.Property<int>("RestaurantTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantTypeId");

                    b.ToTable("RestaurantType");
                });

            modelBuilder.Entity("RestaurantUser", b =>
                {
                    b.Property<int>("RestaurantsRestaurantId")
                        .HasColumnType("int");

                    b.Property<int>("UsersUserId")
                        .HasColumnType("int");

                    b.HasKey("RestaurantsRestaurantId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RestaurantUser");
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("RatingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReviewId");

                    b.HasIndex("OrderId");

                    b.HasIndex("RatingId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Transfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferId"));

                    b.Property<int?>("HotelId")
                        .HasColumnType("int");

                    b.Property<int?>("HotelRoomId")
                        .HasColumnType("int");

                    b.Property<bool>("PaymentCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusTransferStatusId")
                        .HasColumnType("int");

                    b.Property<string>("TransferCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TransferPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("TransferTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TransferId");

                    b.HasIndex("HotelId");

                    b.HasIndex("HotelRoomId");

                    b.HasIndex("StatusTransferStatusId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("TransferStatus", b =>
                {
                    b.Property<int>("TransferStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferStatusId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransferStatusId");

                    b.ToTable("TransferStatus");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("UserEmail", b =>
                {
                    b.Property<int>("UserEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserEmailId"));

                    b.Property<int?>("EmailId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserEmailId");

                    b.HasIndex("EmailId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEmails");
                });

            modelBuilder.Entity("UserPhoneNumber", b =>
                {
                    b.Property<int>("UserPhoneNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPhoneNumberId"));

                    b.Property<int?>("PhoneNumberId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserPhoneNumberId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPhoneNumbers");
                });

            modelBuilder.Entity("UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserTypeId"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserTypeId");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("Address", b =>
                {
                    b.HasOne("District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.Navigation("District");
                });

            modelBuilder.Entity("AdminCommissionEarning", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("AdminCommissionEarnings")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("City", b =>
                {
                    b.HasOne("Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DiscountCoupon", b =>
                {
                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("District", b =>
                {
                    b.HasOne("City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("DriverAssignment", b =>
                {
                    b.HasOne("User", "DeliveryUser")
                        .WithMany("DriverAssignments")
                        .HasForeignKey("DeliveryUserUserId");

                    b.HasOne("Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("DeliveryUser");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Email", b =>
                {
                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("EventLog", b =>
                {
                    b.HasOne("EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");

                    b.HasOne("Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("EventType");

                    b.Navigation("Hotel");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hotel", b =>
                {
                    b.HasOne("Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Address");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HotelCommission", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany("HotelCommissions")
                        .HasForeignKey("HotelId");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelCommissionEarning", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany("HotelCommissionEarnings")
                        .HasForeignKey("HotelId");

                    b.HasOne("Order", "Order")
                        .WithMany("HotelCommissionEarnings")
                        .HasForeignKey("OrderId");

                    b.Navigation("Hotel");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HotelEmail", b =>
                {
                    b.HasOne("Email", "Email")
                        .WithMany("HotelEmails")
                        .HasForeignKey("EmailId");

                    b.HasOne("Hotel", "Hotel")
                        .WithMany("HotelEmails")
                        .HasForeignKey("HotelId");

                    b.Navigation("Email");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelMenu", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelMenuProduct", b =>
                {
                    b.HasOne("HotelMenu", "HotelMenu")
                        .WithMany("MenuProducts")
                        .HasForeignKey("HotelMenuId");

                    b.HasOne("Product", "Product")
                        .WithMany("HotelMenuProducts")
                        .HasForeignKey("ProductId");

                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("HotelMenu");

                    b.Navigation("Product");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("HotelPhoneNumber", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany("HotelPhoneNumbers")
                        .HasForeignKey("HotelId");

                    b.HasOne("PhoneNumber", "PhoneNumber")
                        .WithMany("HotelPhoneNumbers")
                        .HasForeignKey("PhoneNumberId");

                    b.Navigation("Hotel");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("HotelRestaurant", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany("HotelRestaurants")
                        .HasForeignKey("HotelId");

                    b.HasOne("Restaurant", "Restaurant")
                        .WithMany("HotelRestaurants")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Hotel");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("HotelRoom", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany("HotelRoom")
                        .HasForeignKey("HotelId");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("HotelUser", b =>
                {
                    b.HasOne("Hotel", null)
                        .WithMany()
                        .HasForeignKey("HotelsHotelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotificationLog", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("NotificationLogType", "NotificationLogType")
                        .WithMany()
                        .HasForeignKey("NotificationLogTypeId");

                    b.HasOne("Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Hotel");

                    b.Navigation("NotificationLogType");

                    b.Navigation("Restaurant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.HasOne("DiscountCoupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponDiscountCouponId");

                    b.HasOne("Hotel", "Hotel")
                        .WithMany("Orders")
                        .HasForeignKey("HotelId");

                    b.HasOne("HotelRoom", "HotelRoom")
                        .WithMany()
                        .HasForeignKey("HotelRoomId");

                    b.HasOne("OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.HasOne("Payment", "Payment")
                        .WithOne("Order")
                        .HasForeignKey("Order", "PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("Coupon");

                    b.Navigation("Hotel");

                    b.Navigation("HotelRoom");

                    b.Navigation("OrderStatus");

                    b.Navigation("Payment");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("OrderDetail", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId");

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OrderStatusHistory", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId");

                    b.HasOne("OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId");

                    b.Navigation("Order");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.HasOne("PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("PhoneNumber", b =>
                {
                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.HasOne("ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("ProductCategory");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Report", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany()
                        .HasForeignKey("HotelId");

                    b.HasOne("HotelMenu", "HotelMenu")
                        .WithMany()
                        .HasForeignKey("HotelMenuId");

                    b.HasOne("Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("ReportDuration", "ReportDuration")
                        .WithMany()
                        .HasForeignKey("ReportDurationId");

                    b.HasOne("ReportType", "ReportType")
                        .WithMany()
                        .HasForeignKey("ReportTypeId");

                    b.HasOne("Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId");

                    b.HasOne("Transfer", "Transfer")
                        .WithMany()
                        .HasForeignKey("TransferId");

                    b.Navigation("Hotel");

                    b.Navigation("HotelMenu");

                    b.Navigation("Product");

                    b.Navigation("ReportDuration");

                    b.Navigation("ReportType");

                    b.Navigation("Restaurant");

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("Restaurant", b =>
                {
                    b.HasOne("Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("RestaurantType", "RestaurantType")
                        .WithMany()
                        .HasForeignKey("RestaurantTypeId");

                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Address");

                    b.Navigation("RestaurantType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RestaurantCommission", b =>
                {
                    b.HasOne("Restaurant", "Restaurant")
                        .WithMany("RestaurantCommissions")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantEmail", b =>
                {
                    b.HasOne("Email", "Email")
                        .WithMany("RestaurantEmails")
                        .HasForeignKey("EmailId");

                    b.HasOne("Restaurant", "Hotel")
                        .WithMany("RestaurantEmails")
                        .HasForeignKey("HotelRestaurantId");

                    b.Navigation("Email");

                    b.Navigation("Hotel");
                });

            modelBuilder.Entity("RestaurantPhoneNumber", b =>
                {
                    b.HasOne("Restaurant", "Hotel")
                        .WithMany("RestaurantPhoneNumbers")
                        .HasForeignKey("HotelRestaurantId");

                    b.HasOne("PhoneNumber", "PhoneNumber")
                        .WithMany("RestaurantPhoneNumbers")
                        .HasForeignKey("PhoneNumberId");

                    b.Navigation("Hotel");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("RestaurantProduct", b =>
                {
                    b.HasOne("Product", "Product")
                        .WithMany("RestaurantProducts")
                        .HasForeignKey("ProductId");

                    b.HasOne("Restaurant", "Restaurant")
                        .WithMany("RestaurantProducts")
                        .HasForeignKey("RestaurantId");

                    b.Navigation("Product");

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("RestaurantUser", b =>
                {
                    b.HasOne("Restaurant", null)
                        .WithMany()
                        .HasForeignKey("RestaurantsRestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Review", b =>
                {
                    b.HasOne("Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId");

                    b.HasOne("Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId");

                    b.Navigation("Order");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Transfer", b =>
                {
                    b.HasOne("Hotel", "Hotel")
                        .WithMany("Transfers")
                        .HasForeignKey("HotelId");

                    b.HasOne("HotelRoom", "HotelRoom")
                        .WithMany()
                        .HasForeignKey("HotelRoomId");

                    b.HasOne("TransferStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusTransferStatusId");

                    b.Navigation("Hotel");

                    b.Navigation("HotelRoom");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.HasOne("Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId");

                    b.Navigation("Status");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("UserEmail", b =>
                {
                    b.HasOne("Email", "Email")
                        .WithMany("UserEmails")
                        .HasForeignKey("EmailId");

                    b.HasOne("User", "User")
                        .WithMany("UserEmails")
                        .HasForeignKey("UserId");

                    b.Navigation("Email");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserPhoneNumber", b =>
                {
                    b.HasOne("PhoneNumber", "PhoneNumber")
                        .WithMany("UserPhoneNumbers")
                        .HasForeignKey("PhoneNumberId");

                    b.HasOne("User", "User")
                        .WithMany("UserPhoneNumbers")
                        .HasForeignKey("UserId");

                    b.Navigation("PhoneNumber");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Email", b =>
                {
                    b.Navigation("HotelEmails");

                    b.Navigation("RestaurantEmails");

                    b.Navigation("UserEmails");
                });

            modelBuilder.Entity("Hotel", b =>
                {
                    b.Navigation("HotelCommissionEarnings");

                    b.Navigation("HotelCommissions");

                    b.Navigation("HotelEmails");

                    b.Navigation("HotelPhoneNumbers");

                    b.Navigation("HotelRestaurants");

                    b.Navigation("HotelRoom");

                    b.Navigation("Orders");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("HotelMenu", b =>
                {
                    b.Navigation("MenuProducts");
                });

            modelBuilder.Entity("Order", b =>
                {
                    b.Navigation("AdminCommissionEarnings");

                    b.Navigation("HotelCommissionEarnings");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderStatusHistories");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Payment", b =>
                {
                    b.Navigation("Order");
                });

            modelBuilder.Entity("PhoneNumber", b =>
                {
                    b.Navigation("HotelPhoneNumbers");

                    b.Navigation("RestaurantPhoneNumbers");

                    b.Navigation("UserPhoneNumbers");
                });

            modelBuilder.Entity("Product", b =>
                {
                    b.Navigation("HotelMenuProducts");

                    b.Navigation("RestaurantProducts");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Restaurant", b =>
                {
                    b.Navigation("HotelRestaurants");

                    b.Navigation("RestaurantCommissions");

                    b.Navigation("RestaurantEmails");

                    b.Navigation("RestaurantPhoneNumbers");

                    b.Navigation("RestaurantProducts");
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Navigation("DriverAssignments");

                    b.Navigation("UserEmails");

                    b.Navigation("UserPhoneNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
